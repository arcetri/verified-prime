#!/usr/bin/calc -q -s -f
/*
 * jacobi-h-n.calc - generate a jacboi +- or 0 string for each h n pairs
 *
 * usage:
 *
 *	jacobi-h-n.calc filename max
 *
 *	filename	file containing lines of h n
 *	max		maximum Jacobi 1st term
 *
 * For each line from standard input, read h and n:
 *
 *	print a line containing h, n followed by +, -, or
 *	print a line contsining h, n, and just 0
 *
 * The +, - at the end of the line are depending on the Jacobi symbol:
 *
 *	if J(X, h*2^n-1) == -1 print -
 *	if J(X, h*2^n-1) ==  1 print +
 *
 * where X is all values over the range:
 *
 *	1 <= X < max
 *
 * However if we happen to find a X such that:
 *
 *	J(X, h*2^n-1) == 0
 *
 * Then we just print a single "0" indicating that h*2^n-1 is not prime.
 *
 *	We do not test cases where h*2^n-1 < X.  Such h*2^n-1 are trivial
 *	in size and do not need to be primality tested.  So if we find:
 *
 *	    J(X, h*2^n-1) == 0
 *
 *	This means that:
 *
 *	    gcd(X, h*2^n-1) is a factor of h*2^n-1
 *
 *	Thus in that case h*2^n-1 is NOT prime, and the v(1) is not relivant.
 *	So a line of the form:
 *
 *	    h n 0
 *
 *	means we can ignore that h and n for v(1) analysis.
 *
 * Copyright (C) 2019  Landon Curt Noll
 *
 * Calc is open software; you can redistribute it and/or modify it under
 * the terms of the version 2.1 of the GNU Lesser General Public License
 * as published by the Free Software Foundation.
 *
 * Calc is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General
 * Public License for more details.
 *
 * A copy of version 2.1 of the GNU Lesser General Public License is
 * distributed with calc under the filename COPYING-LGPL.  You should have
 * received a copy with calc; if not, write to Free Software Foundation, Inc.
 * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * chongo <was here> /\oo/\     http://www.isthe.com/chongo/
 * Share and enjoy!  :-)        http://www.isthe.com/chongo/tech/comp/calc/
 */

/*
 * setup
 */
argc = argv();
stdout = files(1);
stderr = files(2);
program = argv(0);

/*
 * parse args
 */
if (argc != 3) {
    fprintf(stderr, "usage: %s filename max\n", program);
    exit "wrong number of arguments";
}
filename = argv(1);
max = eval(argv(2));
if (!isint(max) || max < 5) {
    fprintf(stderr, "usage: %s max must be an integer >= 5\n", program);
    exit "wrong number of arguments";
}

/*
 * open the file
 */
stream = fopen(filename, "r");
if (!isfile(stream)) {
    fprintf(stderr, "error(%d): %s\n", errno(stream), strerror(stream));
    exit "unable to open file";
}

/*
 * read h n from file until EOF
 */
while (!feof(stream)) {

    /*
     * read h from file
     */
    h_str = fgetfield(stream);
    if (feof(stream)) {
	exit;
    } else if (isnull(h_str) == 1) {
	exit "FATAL: h was null";
    }
    h = eval(h_str);
    if (!isint(h)) {
	exit "FATAL: h is not an integer";
    }
    orig_h = h;

    /*
     * read n from file
     */
    n_str = fgetfield(stream);
    if (feof(stream)) {
	exit;
    } else if (isnull(n_str) == 1) {
	exit "FATAL: n was null";
    }
    n = eval(n_str);
    if (!isint(n)) {
	exit "FATAL: n is not an integer";
    }
    orig_n = n;

    /*
     * force h to be odd
     */
    while (iseven(h)) {
	++n;
	h /= 2;
    }

    /*
     * ignore n if too small to make h*2^n-1 an odd prime
     */
    if (n < 2) {
	continue;
    }

    /*
     * ignore if h >= 2^n
     */
    if (highbit(h) >= n) {
	continue;
    }

    /*
     * unless we are dealing with the prime 3, skip if h*2^n-1 is a multiple of 3
     */
    if (h != 1 && n != 2) {
	if (((h%3 == 1) && (n%2 == 0)) || ((h%3 == 2) && (n%2 == 1))) {
	    continue;
	}
    }

    /*
     * compute 2nd term of the Jacobi
     */
    testval = h*2^n-1;

    /*
     * ignore h*2^n-1 is <= max
     *
     * The max value is a small value, so if h*2^n-1 <= max,
     * then h*2^n-1 is a small value.  If we were to test such
     * tiny value, we would find Jacobi(X, h*2^n-1) == 0, say
     * because X == h*2^n-1.  Jacobi(X, h*2^n-1) == 0 implies
     * that gcd(X, h*2^n-1) != 0, and therefore gcd(X, h*2^n-1)
     * is a factor of h*2^n-1 or X == h*2^n-1.
     */
    if (max >= testval) {
	continue;
    }

    /*
     * initialize our output string
     */
    print orig_h, orig_n,;

    /*
     * The 1st term of the Jacobi, x, will range over [min,max]
     */
    ok_to_output_jstr = 1;	/* maybe OK to write string */
    jstr = "";
    for (x=1; x <= max; ++x) {

	/* generate the jacobi symbol value */
	jval = jacobi(x, testval);

	/* append a +, -, depending on the jacobi symbol value, skip if 0 */
	if (jval == 1) {
	    jstr += '+';
	} else if (jval == -1) {
	    jstr += '-';
	} else {

	    /*
	     * When jacobi(x, testval) == 0, then gcd(x, testval) != 1.
	     * And thus when x < testval, then gcd(x, testval) must be a factor of testval,
	     * and therefore testval is NOT prime. If testval is NOT prime, then the
	     * analysis of v(1) is pointless. So we skip the output of such valuaes.
	     */
	    ok_to_output_jstr = 0;	/* do not write Jacobi +- string */
	    break;
	}
    }

    /*
     * Write jacobi +- string if no 0 values were found
     */
    if (ok_to_output_jstr != 0) {
	print jstr;
    } else {
	/* indicate we found a X such that jacobi(X, testval) == 0 */
	print 0;
    }
}
