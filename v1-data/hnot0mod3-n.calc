#!/usr/bin/calc -q -s -f
/*
 * hnot0mod3-n.calc - generate h (!= 0 mod 3) n test pairs given a range
 *
 * usage:
 *	gen-h0mod3-n.calc start_n count
 *
 *	start_n		generate n starting at start_n
 *	count		generate n < start_n+count
 *
 * Generate pairs of h and n such that:
 *
 *	limit_n = start_n + count - 1
 *	start_h = 3*start_n
 *	limit_h = start_h + 6*count - 1
 *
 *	start_n <= n <= limit_n
 *
 *	start_h <= h <= limit_h
 *
 *	h is odd
 *
 *	h < 2^n
 *
 *	h != 0 mod 3
 *
 *	h*2^n-1 mod 3 != 0
 *
 * Copyright (C) 2019  Landon Curt Noll
 *
 * Calc is open software; you can redistribute it and/or modify it under
 * the terms of the version 2.1 of the GNU Lesser General Public License
 * as published by the Free Software Foundation.
 *
 * Calc is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General
 * Public License for more details.
 *
 * A copy of version 2.1 of the GNU Lesser General Public License is
 * distributed with calc under the filename COPYING-LGPL.  You should have
 * received a copy with calc; if not, write to Free Software Foundation, Inc.
 * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * chongo <was here> /\oo/\     http://www.isthe.com/chongo/
 * Share and enjoy!  :-)        http://www.isthe.com/chongo/tech/comp/calc/
 */

/*
 * IMPORTANT NOTE:
 *
 * Collecting data on v(1) for when h != 0 mod 3 is just for curosity.
 * It is not important for developing a v(1) search stragety because
 * when h != 0 mod 3, the optimal search strategy is:
 *
 * 	3, 4
 *
 * While 40% of h*2^n-1 when h != 0 mod 3 will be satified with v(1) as 3,
 * 100% of such numbers may use v(1) as 4.  We simply need to test if:
 *
 * 	Jacobi(1, h*2^n-1) == 1
 * 	Jacobi(5, h*2^n-1) == -1
 *
 * then v(1) == 3 else v(1) == 4.
 *
 * The case of h == 0 mod 3 is more complex.  This code and the related
 * helped programs are designed to exclude the h == 0 mod 3 case.
 */

/*
 * setup
 */
program = argv(0);
stderr = files(2);

/*
 * parse args
 */
argc = argv() - 1;
if (argc != 2) {
    fprintf(stderr, "%s FATAL: usage: %s start_n count\n", program, program);
    exit;
}
start_n = eval(argv(1));
count = eval(argv(2));

/*
 * firewall
 */
if (!isint(start_n) || start_n < 2) {
    fprintf(stderr, "%s start_n must be an integer >= 2\n", program);
    exit;
}
if (!isint(count) || count < 1) {
    fprintf(stderr, "%s count must be an integer >= 1\n", program);
    exit;
}

/*
 * h must be odd, so increase start_h if start_n is even
 */
start_h = 3*start_n + iseven(start_n);

/*
 * setup range
 */
limit_n = start_n + count - 1;
limit_h = start_h + 6*count - 1;

/*
 * cycle through the range of n
 */
for (n=start_n; n <= limit_n; ++n) {

    /*
     * cycle through the odd range of h
     */
    for (h=start_h; h <= limit_h; h += 2) {

	/*
	 * if h >= 2^n, stop the h loop
	 */
    	if (highbit(h) >= n) {
	    break;
	}

	/*
	 * skip of h = 0 mod 3
	 */
	if (h%3 == 0) {
	    continue;
	}

	/*
	 * unless we are dealing with the prime 3, skip if h*2^n-1 is a multiple of 3
	 */
	if (h != 1 && n != 2) {
	    if (((h%3 == 1) && (n%2 == 0)) || ((h%3 == 2) && (n%2 == 1))) {
		continue;
	    }
	}

	/* print h n pair */
	print h, n;
    }
}
